{
  "openapi": "3.0.3",
  "info": {
    "title": "Binar Car Management API - OpenAPI 3.0",
    "description": "This API doc provides any availables endpoint both for admin/member. Of course theres differences scope for admin access and member access due to assigned role to each users entity. Every users (both admin/users) needs to acquire token first to access each endpoint, achieved through login endpoint. Therefore every admin/member could access any endpoint that already assigned based on their authentication/authorization based on system rules.  \n\n_Bear in mind, every request should have header with key Authorization, and value of token with prefixes_ admins _for assigned admin,_ members _for user that already registered in the system and_ Supersecret _for superadmin_",
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Project Repo",
    "url": "https://github.com/icankamil/Car-Management-API"
  },
  "servers": [
    {
      "url": "http://localhost:8000/api"
    }
  ],
  "tags": [
    {
      "name": "cars",
      "description": "cars available api's endpoint"
    },
    {
      "name": "users",
      "description": "User management through API"
    }
  ],
  "paths": {
    "/cars": {
      "get": {
        "tags": [
          "cars"
        ],
        "summary": "Get all car data",
        "description": "Get all available car with filtered delete equal to 0",
        "operationId": "getCar",
        "responses": {
          "200": {
            "description": "Return object data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "Array of Object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "tags": [
          "cars"
        ],
        "security": [
          {
            "prefix": []
          }
        ],
        "summary": "Get single car data",
        "description": "Get single car data, including log activity regarding the data (only admins/superadmin)",
        "operationId": "getSingleCar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of car that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return object data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "Array of Object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cars"
        ],
        "security": [
          {
            "prefix": []
          }
        ],
        "summary": "Update an existing car",
        "description": "Update an existing car by request param id. Its only possible for user with type admin/superadmin to update data (hence, we need the admin/superadmin token everytime we update the data)",
        "operationId": "updatesingleCarById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of car that will be edited",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existing car in the system, you may update only the fields that needed to update, not necessary to fill all the fields",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "color": {
                    "type": "string",
                    "example": "string"
                  },
                  "transmission": {
                    "type": "integer",
                    "example": "integer 1 (AT) / 2 (MT)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully update car data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully update car data"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied/ID not supplied/unathorized access"
          }
        }
      }
    },
    "/cars/": {
      "post": {
        "tags": [
          "cars"
        ],
        "security": [
          {
            "prefix": []
          }
        ],
        "summary": "Add a new car to the system",
        "description": "Insert new car by request body object, following car table structure. Its only possible for user with type admin/superadmin to insert car data (hence, we need the admin/superadmin token everytime we create the data)",
        "requestBody": {
          "description": "Create a new car in the system, all fields are required",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "String"
                  },
                  "color": {
                    "type": "string",
                    "example": "String"
                  },
                  "transmission": {
                    "type": "integer",
                    "example": "integer 1 (AT) / 2 (MT)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Car created! with name car name",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Car created! with name car name"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cars/{id}/delete": {
      "put": {
        "tags": [
          "cars"
        ],
        "security": [
          {
            "prefix": []
          }
        ],
        "summary": "Delete existing car by selected id. You need to be admin/superadmin to delete the data (hence, we need the admin/superadmin token everytime we delete the data)",
        "description": "Delete operation only on data, not bulk delete.",
        "operationId": "deleteSingleCarById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of car that will be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existing car in the system",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deleted": {
                    "type": "integer",
                    "example": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully Deleted car, deleted by ${userName} at ${new Date()}",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully update car data"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied/ID not supplied/unathorized access"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "prefix": []
          }
        ],
        "summary": "Login by username(email) and password",
        "description": "Login included header with key Authorization and token with predefined prefixes as value",
        "operationId": "loginUsers",
        "requestBody": {
          "description": "only needs user_name and password propert in form raw object (JSON)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_name": {
                    "type": "string",
                    "example": "users@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "testpassword"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response successfull message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Welcome Users, please save the token somewhere else to include in another transaction"
                    },
                    "credential": {
                      "type": "string",
                      "example": "users@mail.com"
                    },
                    "token": {
                      "type": "string",
                      "example": "alphanumeric random generated token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/whoami": {
      "get": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "prefix": []
          }
        ],
        "summary": "Get details about users who active",
        "description": "This request must be provided with header defined by key Authorization and token with predefined prefixes as value",
        "operationId": "getDetails",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_name": {
                      "type": "string",
                      "example": "users@mail.com"
                    },
                    "full_name": {
                      "type": "string",
                      "example": "Full Name"
                    },
                    "token": {
                      "type": "string",
                      "example": "alphanumeric random generated token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admins": {
      "post": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "prefix": []
          }
        ],
        "summary": "Create users with roles admin",
        "description": "This request only available for user with role Superadmin (hence, we need the superadmin token everytime we create admin)",
        "operationId": "createAdmins",
        "requestBody": {
          "description": "You have to supply email as username, password and fullname of admins in form of raw object request (JSON)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_name": {
                    "type": "string",
                    "example": "users@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "testpassword"
                  },
                  "full_name": {
                    "type": "string",
                    "example": "Users Full Name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Admin created! with credential adminn@mail.com and token alphanumeric random generated token"
                    },
                    "credential": {
                      "type": "string",
                      "example": "users@mail.com"
                    },
                    "token": {
                      "type": "string",
                      "example": "alphanumeric random generated token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/members/register": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Self registration for user role member",
        "description": "This request available for public",
        "operationId": "createMembers",
        "requestBody": {
          "description": "You have to supply email as username, password and fullname of users in form of raw object request (JSON)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_name": {
                    "type": "string",
                    "example": "users@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "testpassword"
                  },
                  "full_name": {
                    "type": "string",
                    "example": "Users Full Name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Users created! with credential member2@mail.com and generated alphanumeric token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "prefix": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Please include the token with prefix as value of header Authorization"
      }
    }
  }
}